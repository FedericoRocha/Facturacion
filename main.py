import streamlit as st
import pandas as pd
from datetime import datetime
import data_manager as dm
import visualizations as viz
import utils
import logging

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuraci√≥n de la p√°gina
try:
    st.set_page_config(
        page_title="Gesti√≥n Financiera",
        page_icon="üí∞",
        layout="wide"
    )
    logger.info("Configuraci√≥n de p√°gina completada")
except Exception as e:
    logger.error(f"Error en la configuraci√≥n de p√°gina: {str(e)}")
    st.error("Error al configurar la p√°gina")

# Inicializaci√≥n del estado de la sesi√≥n
try:
    if 'datos_financieros' not in st.session_state:
        st.session_state.datos_financieros = pd.DataFrame(columns=[
            'fecha', 'facturacion_a', 'facturacion_b', 'facturacion_c',
            'gastos_operativos', 'otros_gastos', 'retenciones',
            'iva_debito', 'iva_credito', 'iva_total',
            'ingresos_brutos', 'utilidad'
        ])
        logger.info("Estado de sesi√≥n inicializado correctamente")
except Exception as e:
    logger.error(f"Error al inicializar el estado de sesi√≥n: {str(e)}")
    st.error("Error al inicializar los datos")

def main():
    try:
        st.title("üìä Sistema de Gesti√≥n Financiera")
        logger.info("Aplicaci√≥n iniciada correctamente")

        # Sidebar para navegaci√≥n
        menu = st.sidebar.selectbox(
            "Men√∫ Principal",
            ["Ingreso de Datos", "An√°lisis Mensual", "An√°lisis Temporal", "Estad√≠sticas"]
        )

        if menu == "Ingreso de Datos":
            mostrar_ingreso_datos()
        elif menu == "An√°lisis Mensual":
            mostrar_analisis_mensual()
        elif menu == "An√°lisis Temporal":
            mostrar_analisis_temporal()
        else:
            mostrar_estadisticas()

    except Exception as e:
        logger.error(f"Error en la funci√≥n principal: {str(e)}")
        st.error("Se produjo un error en la aplicaci√≥n")

def mostrar_ingreso_datos():
    st.header("üìù Ingreso de Datos Financieros")

    with st.form("formulario_datos"):
        col1, col2, col3 = st.columns([1, 1, 1])

        # Primera fila: Mes, A√±o y Gastos operativos
        with col1:
            # Selector de mes
            meses = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
                    "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"]
            mes = st.selectbox(
                "Mes",
                meses,
                index=datetime.now().month - 1,  # Mes actual por defecto
                help="Seleccione el mes"
            )

        with col2:
            # Selector de a√±o
            a√±o_actual = datetime.now().year
            a√±o = st.selectbox(
                "A√±o",
                range(a√±o_actual - 5, a√±o_actual + 1),
                index=5,  # Seleccionar a√±o actual por defecto
                help="Seleccione el a√±o"
            )

        with col3:
            gastos_operativos = st.number_input(
                "Gastos Operativos ($)",
                min_value=0.0,
                format="%f",
                help="Ingrese el total de gastos operativos"
            )

        # Segunda fila: Facturaciones
        st.markdown("### Facturaci√≥n")
        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            facturacion_a = st.number_input(
                "Facturaci√≥n A ($)",
                min_value=0.0,
                format="%f",
                help="Ingrese el monto de facturaci√≥n tipo A"
            )

        with col2:
            facturacion_b = st.number_input(
                "Facturaci√≥n B ($)",
                min_value=0.0,
                format="%f",
                help="Ingrese el monto de facturaci√≥n tipo B"
            )

        with col3:
            facturacion_c = st.number_input(
                "Facturaci√≥n C ($)",
                min_value=0.0,
                format="%f",
                help="Ingrese el monto de facturaci√≥n tipo C"
            )

        # Tercera fila: Otros gastos y retenciones
        st.markdown("### Otros Conceptos")
        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            otros_gastos = st.number_input(
                "Otros Gastos ($)",
                min_value=0.0,
                format="%f",
                help="Ingrese otros gastos no operativos"
            )

        with col2:
            retenciones = st.number_input(
                "Retenciones ($)",
                min_value=0.0,
                format="%f",
                help="Ingrese el monto total de retenciones"
            )

        submitted = st.form_submit_button("Guardar Datos")

        if submitted:
            # Crear fecha para el primer d√≠a del mes seleccionado
            mes_num = meses.index(mes) + 1
            fecha = pd.Timestamp(a√±o, mes_num, 1)

            datos = {
                'facturacion_a': facturacion_a,
                'facturacion_b': facturacion_b,
                'facturacion_c': facturacion_c,
                'gastos_operativos': gastos_operativos,
                'otros_gastos': otros_gastos,
                'retenciones': retenciones
            }

            try:
                nuevo_registro = dm.agregar_registro(
                    st.session_state.datos_financieros,
                    fecha,
                    datos
                )
                st.session_state.datos_financieros = nuevo_registro
                st.success("‚úÖ Datos guardados exitosamente!")
                logger.info("Datos guardados correctamente")
            except Exception as e:
                logger.error(f"Error al guardar los datos: {str(e)}")
                st.error("Error al guardar los datos")


def mostrar_analisis_mensual():
    st.header("üìÖ An√°lisis Mensual")

    if st.session_state.datos_financieros.empty:
        st.warning("‚ö†Ô∏è No hay datos disponibles para analizar")
        return

    # Obtener an√°lisis mensual
    try:
        df_mensual = dm.analisis_mensual(st.session_state.datos_financieros)
    except Exception as e:
        logger.error(f"Error al generar el an√°lisis mensual: {str(e)}")
        st.error("Error al generar el an√°lisis mensual")
        return

    # Selector de mes
    meses = df_mensual.index.strftime('%B %Y').tolist()
    mes_seleccionado = st.selectbox("Seleccione el mes", meses)
    df_mes = df_mensual.loc[df_mensual.index.strftime('%B %Y') == mes_seleccionado]

    # Mostrar resumen del mes
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            "Facturaci√≥n Total del Mes",
            utils.formato_moneda(df_mes['facturacion_total'].iloc[0])
        )

    with col2:
        st.metric(
            "Gastos Totales del Mes",
            utils.formato_moneda(df_mes['gastos_totales'].iloc[0])
        )

    with col3:
        st.metric(
            "Utilidad del Mes",
            utils.formato_moneda(df_mes['utilidad'].iloc[0])
        )

    # Gr√°ficos mensuales
    col1, col2 = st.columns(2)

    with col1:
        st.plotly_chart(
            viz.grafico_barras_comparativo(df_mensual),
            use_container_width=True
        )
        st.plotly_chart(
            viz.grafico_impuestos(df_mensual),
            use_container_width=True
        )

    with col2:
        st.plotly_chart(
            viz.grafico_barras_gastos(df_mensual),
            use_container_width=True
        )
        st.plotly_chart(
            viz.grafico_lineas_temporales(df_mensual),
            use_container_width=True
        )

def mostrar_analisis_temporal():
    st.header("üìà An√°lisis Temporal")

    if st.session_state.datos_financieros.empty:
        st.warning("‚ö†Ô∏è No hay datos disponibles para analizar")
        return

    periodo = st.selectbox(
        "Seleccione el per√≠odo de an√°lisis",
        ["Mensual", "Bimestral", "Trimestral", "Anual"]
    )

    try:
        df_analisis = dm.agrupar_por_periodo(
            st.session_state.datos_financieros,
            periodo
        )
    except Exception as e:
        logger.error(f"Error al generar el an√°lisis temporal: {str(e)}")
        st.error("Error al generar el an√°lisis temporal")
        return

    col1, col2 = st.columns(2)

    with col1:
        st.plotly_chart(
            viz.grafico_lineas_temporales(df_analisis),
            use_container_width=True
        )
        st.plotly_chart(
            viz.grafico_impuestos(df_analisis),
            use_container_width=True
        )

    with col2:
        st.plotly_chart(
            viz.grafico_barras_comparativo(df_analisis),
            use_container_width=True
        )
        st.plotly_chart(
            viz.grafico_barras_gastos(df_analisis),
            use_container_width=True
        )

def mostrar_estadisticas():
    st.header("üìä Estad√≠sticas Financieras")

    if st.session_state.datos_financieros.empty:
        st.warning("‚ö†Ô∏è No hay datos disponibles para analizar")
        return

    try:
        stats = dm.calcular_estadisticas(st.session_state.datos_financieros)
    except Exception as e:
        logger.error(f"Error al calcular las estad√≠sticas: {str(e)}")
        st.error("Error al calcular las estad√≠sticas")
        return

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Resumen General")
        st.metric(
            "Facturaci√≥n Total",
            utils.formato_moneda(stats['facturacion_total'])
        )
        st.metric(
            "Gastos Totales",
            utils.formato_moneda(stats['gastos_totales'])
        )
        st.metric(
            "Impuestos Totales",
            utils.formato_moneda(stats['impuestos_totales'])
        )
        st.metric(
            "Utilidad Total",
            utils.formato_moneda(stats['utilidad_total'])
        )

    with col2:
        st.plotly_chart(
            viz.grafico_lineas_temporales(st.session_state.datos_financieros),
            use_container_width=True
        )

    if st.button("Exportar Datos"):
        try:
            utils.exportar_datos(st.session_state.datos_financieros)
            logger.info("Datos exportados correctamente")
        except Exception as e:
            logger.error(f"Error al exportar los datos: {str(e)}")
            st.error("Error al exportar los datos")

if __name__ == "__main__":
    try:
        main()
        logger.info("Aplicaci√≥n ejecutada exitosamente")
    except Exception as e:
        logger.error(f"Error cr√≠tico en la aplicaci√≥n: {str(e)}")
        st.error("Error cr√≠tico en la aplicaci√≥n")